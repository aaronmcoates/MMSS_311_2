odev <- function(x){
ifelse(round(x, digits=0) - x!=0, "Not an integer", ifelse(round(x/2, digits=0) - x/2 != 0, "Odd", "Even"))
}
odev(1)
odev(1.5)
odev(2)
hey <- function(x){
if(round(x, digits=0) - x!=0){
print("Not an Integer!")
} else if(round(x/2, digits=0) - (x/2) != 0) {
print("Odd")
} else {
print("Even")
}}
hey(1)
hey(2)
hey(3.5)
hey <- function(x){
if(round(x, digits=0) - x!=0){
print("Not an Integer!")
} else if(round(x/2, digits=0) - (x/2) != 0) {
print("Odd")
} else {
print("Even")
}}
hey(5)
hey(62)
hey(34.5)
odev <- function(x){
ifelse(round(x, digits=0) - x!=0, "Not an integer", ifelse(round(x/2, digits=0) - x/2 != 0, "Odd", "Even"))
}
odev(11)
odev(103.5)
odev(26)
vecky <- vector(1:6)
slayme <- vector(sample(vecky, 20, replace = TRUE))
vecky <- c(1:6)
slayme <- vector(sample(vecky, 20, replace = TRUE))
vecky <- c(1:6)
slayme <- c(sample(vecky, 20, replace = TRUE))
vecky <- c(1:6)
slayme <- c(sample(vecky, 20, replace = TRUE))
final <- sapply(slayme,
function(x){
if(round(x/2, digits=0) - (x/2) != 0){
2x
} else {
x^2
}})
final <- sapply(slayme,
function(x){
if(round(x/2, digits=0) - x/2 != 0){
2 * x
} else {
x^2
}})
print("Odd")
slayme
final
setwd("~/Documents/GitHub/MMSS_311_2")
sick <- read.csv("/Users/aaroncoates/Downloads/sick_data.csv")
library(dplyr)
library(ggplot2)
install.packages("glmnet", repos = "http://cran.us.r-project.org")
library(glmnet)
install.packages("broom")
library(broom)
install.packages("aod")
library(aod)
sick$result.d <- sapply(sick$result, function(x){
if(x == "Positive"){
print(1)
} else {
print(0)
}})
regOLS <- glm(result.d ~ temp + bp, data=sick) %>% broom::tidy()
for (i in 1:1000) {sick$predictionOLS[i] <- regOLS[1, 2] + regOLS[2, 2]*sick$temp[i] + regOLS[3,2]*sick$bp[i]}
sick$result <- factor(sick$result)
logit <- glm(result ~ temp + bp, data = sick, family = "binomial") %>% broom::tidy()
for (i in 1:1000) {sick$predictionLOGIT[i] <- logit[1, 2] + logit[2, 2]*sick$temp[i] + logit[3,2]*sick$bp[i]}
sum(with(sick, result.d==1 & predictionOLS>=.5))
sick$OLScorrect <- vector(1000L)
for (i in 1:1000){sick$OLScorrect[i] <-  if(sick$result.d[i] == 1 & sick$predictionOLS[i] >= .5){
1
} else {
0
}}
sick$OLScorrect <- vector()
for (i in 1:1000){sick$OLScorrect[i] <-  if(sick$result.d[i] == 1 & sick$predictionOLS[i] >= .5){
1
} else {
0
}}
sick$OLScorrect <- vector(1:1000)
for (i in 1:1000){sick$OLScorrect[i] <-  if(sick$result.d[i] == 1 & sick$predictionOLS[i] >= .5){
1
} else {
0
}}
OLScorrect <- vector()
for (i in 1:1000){OLScorrect[i] <-  if(sick$result.d[i] == 1 & sick$predictionOLS[i] >= .5){
1
} else {
0
}}
=sum(OLScorrect)
sum(OLScorrect)
sum(with(sick, result.d==1 & predictionOLS>=.5))
sum(with(sick, result.d==1 & predictionOLS<=.5))
sum(with(sick, result.d==0 & predictionOLS>=.5))
sum(with(sick, result.d==0 & predictionOLS<=.5))
sum(with(sick, result.d==1 & predictionLOGIT>=.5))
sum(with(sick, result.d==1 & predictionLOGIT<=.5))
sum(with(sick, result.d==0 & predictionLOGIT>=.5))
sum(with(sick, result.d==0 & predictionLOGIT<=.5))
ggplot(x=temp, y=bp, data=sick)
ggplot(x=temp, y=bp, data=sick) + geom_point()
ggplot(x = temp, y = bp, data=sick) + geom_point()
ggplot(data = sick, aes[x = temp, y = bp])+ geom_point()
ggplot(data = sick, aes(x = temp, y = bp)) + geom_point()
int <- (regOLS[1, 2] -.5)/(-regOLS[3, 2]))
int <- (regOLS[1, 2] -.5)/(-regOLS[3, 2])
slope <- regOLS[2, 2]/(-regOLS[3,2])
ggplot(data = sick, aes(x = temp, y = bp)) + geom_point() + geom_abline(intercept = int, slope = slope)
int <- (regOLS[1, 2] -.5)/(-regOLS[3, 2])
slopey <- regOLS[2, 2]/(-regOLS[3,2])
ggplot(data = sick, aes(x = temp, y = bp)) + geom_point() + geom_abline(intercept = int, slope = slopey)
View(int)
View(slope)
View(slopey)
ggplot(data = sick, aes(x = temp, y = bp)) + geom_point() + geom_abline(intercept = int[1, 1], slope = slopey[1, 1])
ggplot(data = sick, aes(x = temp, y = bp), shape=result) + geom_point() + geom_abline(intercept = intOLS[1, 1], slope = slopeyOLS[1, 1])
intOLS <- (regOLS[1, 2] -.5)/(-regOLS[3, 2])
slopeyOLS <- regOLS[2, 2]/(-regOLS[3,2])
ggplot(data = sick, aes(x = temp, y = bp), shape=result) + geom_point() + geom_abline(intercept = intOLS[1, 1], slope = slopeyOLS[1, 1])
ggplot(data = sick, aes(x = temp, y = bp, shape=result)) + geom_point() + geom_abline(intercept = intOLS[1, 1], slope = slopeyOLS[1, 1])
intOLS <- (regOLS[1, 2] -.5)/(-regOLS[3, 2])
slopeyOLS <- regOLS[2, 2]/(-regOLS[3,2])
plotOLS <- ggplot(data = sick, aes(x = temp, y = bp, shape=result)) + geom_point() + geom_abline(intercept = intOLS[1, 1], slope = slopeyOLS[1, 1])
plotOLS <- ggplot(data = sick, aes(x = temp, y = bp, col=result)) + geom_point() + geom_abline(intercept = intOLS[1, 1], slope = slopeyOLS[1, 1])
plotOLS <- ggplot(data = sick, aes(x = temp, y = bp, col=result)) + geom_point() + geom_abline(intercept = intOLS[1, 1], slope = slopeyOLS[1, 1])
intOLS <- (regOLS[1, 2] -.5)/(-regOLS[3, 2])
slopeyOLS <- regOLS[2, 2]/(-regOLS[3,2])
plotOLS <- ggplot(data = sick, aes(x = temp, y = bp, col=result)) + geom_point() + geom_abline(intercept = intOLS[1, 1], slope = slopeyOLS[1, 1])
intOLS <- (regOLS[1, 2] -.5)/(-regOLS[3, 2])
slopeyOLS <- regOLS[2, 2]/(-regOLS[3,2])
plotOLS <- ggplot(data = sick, aes(x = temp, y = bp, color=result)) + geom_point() + geom_abline(intercept = intOLS[1, 1], slope = slopeyOLS[1, 1])
plotOLS
intLOG <- (regLOG[1, 2] -.5)/(-regLOG[3, 2])
slopeyLOG <- regLOG[2, 2]/(-regLOG[3,2])
plotLOG <- ggplot(data = sick, aes(x = temp, y = bp, col=result)) + geom_point() + geom_abline(intercept = intLOG[1, 1], slope = slopeyLOG[1, 1])
plotLOG
intLOG <- (logit[1, 2] -.5)/(-logit[3, 2])
slopeyLOG <- logit[2, 2]/(-logit[3,2])
plotLOG <- ggplot(data = sick, aes(x = temp, y = bp, col=result)) + geom_point() + geom_abline(intercept = intLOG[1, 1], slope = slopeyLOG[1, 1])
plotLOG
setwd("~/Documents/GitHub/MMSS_311_2")
wid <- read.csv("/Users/aaroncoates/Downloads/widget_data.csv")
View(wid)
library(dplyr)
library(ggplot2)
library(glmnet)
library(broom)
library(aod)
setwd("~/Documents/GitHub/MMSS_311_2")
wid <- read.csv("/Users/aaroncoates/Downloads/widget_data.csv")
library(dplyr)
library(ggplot2)
library(glmnet)
library(broom)
library(aod)
grid=10^seq(2,-2,length=100)
ridge <- glmnet(x = as.matrix(wid[, -1]), y = wid$y, alpha=0, lambda=grid) %>% broom::tidy()
View(ridge)
plot(ridge)
ridge <- glmnet(x = as.matrix(wid[, -1]), y = wid$y, alpha=0, lambda=grid)
plot(ridge)
ridge <- glmnet(x = as.matrix(wid[, -1]), y = wid$y, alpha=0, lambda=grid)
tidy(ridge)
ggplot(data=ridge,
aes(x=lambda, y=estimate, colour=term)) +
geom_line()
data.frame(ridge1) = ridge
ridge1 = data.frame(ridge)
grid=10^seq(2,-2,length=100)
ridge <- glmnet(x = as.matrix(wid[, -1]), y = wid$y, alpha=0, lambda=grid)
View(ridge)
tidy(ridge)
View(ridge)
ridge1 <- tidy(ridge)
View(ridge1)
library(tidyr)
tidyr(ridge1)
gather(ridge1)
ridge1 %>%
gather(term)
ggplot(data=ridge1,
aes(x=lambda, y=estimate, colour=term)) +
geom_line()
ridge2 <- ridge[-1:100, ]
ridge2 <- ridge[-c(1:100), ]
ridge2 <- ridge[-c(1:100),]
ridge2 <- ridge[101:3100,]
ridge2 <- ridge1[-1:100,]
ridge2 <- ridge1[-c(1:100),]
View(ridge2)
ridge2 <- ridge1[ which(term!='intercept']
ridge2 <- ridge1[ which(term!='intercept' ]
ridge2 <- ridge1[ which(term!='intercept', ]
ridge2 <- ridge1[ which(term!='intercept'), ]
ridge2 <- ridge1[ which(ridge1$term!='intercept'), ]
View(ridge2)
ridge2 <- ridge1[ which(ridge1$term!='(Intercept)'), ]
ggplot(data=ridge2,
aes(x=lambda, y=estimate, colour=term)) +
geom_line()
ggplot(data=ridge2,
aes(x=lambda, y=estimate, colour=term)) +
geom_line() + coord_cartesian(
xlim = (), ylim = c(-.5, .5))
ggplot(data=ridge2,
aes(x=lambda, y=estimate, colour=term)) +
geom_line() + coord_cartesian(
xlim = c(0,100), ylim = c(-.5, .5))
cv.glmnet(x = as.matrix(wid[, -1]), y = wid$y)
crossval <- cv.glmnet(x = as.matrix(wid[, -1]), y = wid$y, alpha=0, lambda=grid)
plot(crossval)
crossval <- cv.glmnet(x = as.matrix(wid[, -1]), y = wid$y, alpha=0, lambda=grid)
crossval1 <- tidy(crossval)
View(crossval1)
plot(crossval1)
crossval <- cv.glmnet(x = as.matrix(wid[, -1]), y = wid$y, alpha=0, lambda=grid)
plot(crossval)
crossval1 <- tidy(crossval)
ggplot(data=crossval1,
aes(x=lambda, y=estimate))
ggplot(data=crossval1,
aes(x=lambda, y=estimate)) + geom_line()
ggplot(data=crossval1,
aes(x=lambda, y=estimate)) + geom_line() + geom_errorbar(std.error)
ggplot(data=crossval1,
aes(x=lambda, y=estimate)) + geom_line() + geom_errorbar(crossval1$std.error)
ggplot(data=crossval1,
aes(x=lambda, y=estimate, ymin=conf.low, ymax=conf.high)) + geom_line() + geom_errorbar()
ggplot(data=crossval1,
aes(x=lambda, y=estimate, ymin=conf.low, ymax=conf.high)) + geom_line() + geom_errorbarh()
ggplot(data=crossval1,
aes(x=lambda, y=estimate, ymin=conf.low, ymax=conf.high)) + geom_line() + geom_errorbar()
ggplot(data=crossval1,
aes(x=lambda, y=estimate, ymin=conf.low, ymax=conf.high)) + geom_line() + geom_pointrange()
ggplot(data=crossval1,
aes(x=log(lambda), y=estimate, ymin=conf.low, ymax=conf.high)) + geom_line() + geom_pointrange()
plot(crossval)
ggplot(data=ridge2,
aes(x=lambda, y=estimate, colour=term)) +
geom_line() + coord_cartesian(
xlim = c(0,100), ylim = c(-.5, .5))
plot(ridge2)
plot(ridge)
ggplot(data=ridge,
+        aes(x=lambda, y=estimate, colour=term)) +
+   geom_line() + coord_cartesian(
+     xlim = c(0,100), ylim = c(-.5, .5))
ggplot(data=ridge,
+        aes(x=lambda, y=estimate, colour=term)) +
+   geom_line() + coord_cartesian(xlim = c(0,100), ylim = c(-.5, .5))
ggplot(data=ridge, aes(x=lambda, y=estimate, colour=term)) +
geom_line() + coord_cartesian(xlim = c(0,100), ylim = c(-.5, .5))
ggplot(data=ridge1, aes(x=lambda, y=estimate, colour=term)) +
geom_line() + coord_cartesian(xlim = c(0,100), ylim = c(-.5, .5))
ggplot(data=ridge2, aes(x=lambda, y=estimate, colour=term)) +
geom_line() + coord_cartesian(xlim = c(0,100), ylim = c(-.5, .5))
plot(ridge)
plot(ridge, label==TRUE)
plot(ridge, label = TRUE)
plot(ridge)
grid=10^seq(2,-2,length=100)
lasso <- glmnet(x = as.matrix(wid[, -1]), y = wid$y, alpha=1, lambda=grid)
lasso1 <- tidy(lasso)
View(lasso1)
plot(lasso)
ggplot(data=lasso1, aes(x=lambda, y=estimate, colour=term)) +
geom_line() + coord_cartesian(xlim = c(0,100), ylim = c(-.5, .5))
ggplot(data=lasso1, aes(x=lambda, y=estimate, colour=term)) +
geom_line()
ggplot(data=lasso1, aes(x=lambda, y=estimate, colour=term)) +
geom_line() + coord_cartesian(xlim = c(0,5), ylim = c(-3, 3))
ggplot(data=lasso1, aes(x=lambda, y=estimate, colour=term)) +
geom_line() + coord_cartesian(xlim = c(0,2), ylim = c(-3, 3))
ggplot(data=lasso1, aes(x=lambda, y=estimate, colour=term)) +
geom_line() + coord_cartesian(xlim = c(0,2), ylim = c(-1, 1))
crossvallasso <- cv.glmnet(x = as.matrix(wid[, -1]), y = wid$y, alpha=1, lambda=grid)
crossvallasso <- cv.glmnet(x = as.matrix(wid[, -1]), y = wid$y, alpha=1, lambda=grid)
crossvallasso1 <- tidy(crossvallasso)
plot(crossvallasso)
crossval$lambda.min
crossval$lambda.min
crossvallasso$lambda.min
crossval$lambda.min
coef(crossval, s = "lambda.min")
crossvallasso$lambda.min
coef(crossvallasso, s = "lambda.min")
setwd("~/Documents/GitHub/MMSS_311_2")
wid <- read.csv("/Users/aaroncoates/Downloads/widget_data.csv")
library(dplyr)
library(ggplot2)
library(glmnet)
library(broom)
library(aod)
grid=10^seq(2,-2,length=100)
ridge <- glmnet(x = as.matrix(wid[, -1]), y = wid$y, alpha=0, lambda=grid)
plot(ridge)
ridge1 <- tidy(ridge)
ridge2 <- ridge1[ which(ridge1$term!='(Intercept)'), ]
ggplot(data=ridge2, aes(x=lambda, y=estimate, colour=term)) +
geom_line() + coord_cartesian(xlim = c(0,100), ylim = c(-.5, .5))
crossval <- cv.glmnet(x = as.matrix(wid[, -1]), y = wid$y, alpha=0, lambda=grid)
plot(crossval)
crossval$lambda.min
coef(crossval, s = "lambda.min")
grid=10^seq(2,-2,length=100)
lasso <- glmnet(x = as.matrix(wid[, -1]), y = wid$y, alpha=1, lambda=grid)
plot(lasso)
lasso1 <- tidy(lasso)
ggplot(data=lasso1, aes(x=lambda, y=estimate, colour=term)) +
geom_line() + coord_cartesian(xlim = c(0,2), ylim = c(-1, 1))
crossvallasso <- cv.glmnet(x = as.matrix(wid[, -1]), y = wid$y, alpha=1, lambda=grid)
plot(crossvallasso)
crossvallasso$lambda.min
coef(crossvallasso, s = "lambda.min")
ggplot(data=ridge2, aes(x=lambda, y=estimate, colour=term)) +
geom_line() + coord_cartesian(xlim = c(0,100), ylim = c(-.5, .5))
ggplot(data=lasso1, aes(x=lambda, y=estimate, colour=term)) +
geom_line() + coord_cartesian(xlim = c(0,2), ylim = c(-1, 1))
plot(lasso)
plot(lasso, label = TRUE)
plot(ridge, label = TRUE)
install.packages("rmarkdown")
library(rmarkdown)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
sick <- read.csv("/Users/aaroncoates/Downloads/sick_data.csv")
library(dplyr)
library(ggplot2)
library(glmnet)
library(broom)
library(aod)
sick$result.d <- sapply(sick$result, function(x){
if(x == "Positive"){
1
} else {
0
}})
regOLS <- glm(result.d ~ temp + bp, data=sick) %>% broom::tidy()
for (i in 1:1000) {sick$predictionOLS[i] <- regOLS[1, 2] + regOLS[2, 2]*sick$temp[i] + regOLS[3,2]*sick$bp[i]}
sum(with(sick, result.d==1 & predictionOLS>=.5))
sum(with(sick, result.d==1 & predictionOLS<=.5))
sum(with(sick, result.d==0 & predictionOLS>=.5))
sum(with(sick, result.d==0 & predictionOLS<=.5))
intOLS <- (regOLS[1, 2] -.5)/(-regOLS[3, 2])
slopeyOLS <- regOLS[2, 2]/(-regOLS[3,2])
plotOLS <- ggplot(data = sick, aes(x = temp, y = bp, col=result)) + geom_point() + geom_abline(intercept = intOLS[1, 1], slope = slopeyOLS[1, 1])
plotOLS
sick$result <- factor(sick$result)
logit <- glm(result ~ temp + bp, data = sick, family = "binomial") %>% broom::tidy()
for (i in 1:1000) {sick$predictionLOGIT[i] <- logit[1, 2] + logit[2, 2]*sick$temp[i] + logit[3,2]*sick$bp[i]}
sum(with(sick, result.d==1 & predictionLOGIT>=.5))
sum(with(sick, result.d==1 & predictionLOGIT<=.5))
sum(with(sick, result.d==0 & predictionLOGIT>=.5))
sum(with(sick, result.d==0 & predictionLOGIT<=.5))
intLOG <- (logit[1, 2] -.5)/(-logit[3, 2])
slopeyLOG <- logit[2, 2]/(-logit[3,2])
plotLOG <- ggplot(data = sick, aes(x = temp, y = bp, col=result)) + geom_point() + geom_abline(intercept = intLOG[1, 1], slope = slopeyLOG[1, 1])
plotLOG
plotLOG <- ggplot(data = sick, aes(x = temp, y = bp, col=result)) + geom_point() + geom_abline(intercept = intLOG[1, 1], slope = slopeyLOG[1, 1]) + labs(title ="Logit", x = "Temperature", y = "Blood Pressure")
plotLOG
plotOLS <- ggplot(data = sick, aes(x = temp, y = bp, col=result)) + geom_point() + geom_abline(intercept = intOLS[1, 1], slope = slopeyOLS[1, 1]) + labs(title ="OLS", x = "Temperature", y = "Blood Pressure")
plotOLS <- ggplot(data = sick, aes(x = temp, y = bp, col=result)) + geom_point() + geom_abline(intercept = intOLS[1, 1], slope = slopeyOLS[1, 1]) + labs(title ="OLS", x = "Temperature", y = "Blood Pressure")
plotOLS
