odev <- function(x){
ifelse(round(x, digits=0) - x!=0, "Not an integer", ifelse(round(x/2, digits=0) - x/2 != 0, "Odd", "Even"))
}
odev(1)
odev(1.5)
odev(2)
hey <- function(x){
if(round(x, digits=0) - x!=0){
print("Not an Integer!")
} else if(round(x/2, digits=0) - (x/2) != 0) {
print("Odd")
} else {
print("Even")
}}
hey(1)
hey(2)
hey(3.5)
hey <- function(x){
if(round(x, digits=0) - x!=0){
print("Not an Integer!")
} else if(round(x/2, digits=0) - (x/2) != 0) {
print("Odd")
} else {
print("Even")
}}
hey(5)
hey(62)
hey(34.5)
odev <- function(x){
ifelse(round(x, digits=0) - x!=0, "Not an integer", ifelse(round(x/2, digits=0) - x/2 != 0, "Odd", "Even"))
}
odev(11)
odev(103.5)
odev(26)
vecky <- vector(1:6)
slayme <- vector(sample(vecky, 20, replace = TRUE))
vecky <- c(1:6)
slayme <- vector(sample(vecky, 20, replace = TRUE))
vecky <- c(1:6)
slayme <- c(sample(vecky, 20, replace = TRUE))
vecky <- c(1:6)
slayme <- c(sample(vecky, 20, replace = TRUE))
final <- sapply(slayme,
function(x){
if(round(x/2, digits=0) - (x/2) != 0){
2x
} else {
x^2
}})
final <- sapply(slayme,
function(x){
if(round(x/2, digits=0) - x/2 != 0){
2 * x
} else {
x^2
}})
print("Odd")
slayme
final
setwd("~/Documents/GitHub/MMSS_311_2")
pol <- read.csv("/Users/aaroncoates/Downloads/pol_data.csv")
View(odev)
View(pol)
install.packages("e1071")
library(e1071)
svm$pol <- as.factor(svm$pol)
pol$group <- as.factor(pol$group)
svm <- svm(group ~ pol_margin + col_degree + house_income)
svm <- svm(group ~ pol_margin + col_degree + house_income, data=pol)
View(svm)
View(svm)
tidy(svm)
library(broom)
tidy(svm)
plot(svm, pol)
svm <- svm(group ~ pol_margin + col_degree + house_income, data=pol, kernel = "linear", cost=10, scale=FALSE)
install.packages("caret")
library(caret)
trainsize <- floor((2/3)*nrow(pol))
train_pol <- sample(nrow(pol), size = trainsize)
train_pol <- sample(seq_len(nrow(pol)), size = trainsize)
train_pol <- sample(nrow(pol), size = trainsize)
trainingdata <- pol[train_pol, ]
testydata <- pol[-train_pol, ]
set.seed(2)
train_pol <- sample(nrow(pol), size = trainsize, replace=FALSE)
trainingdata <- pol[train_pol, ]
testydata <- pol[-train_pol, ]
View(testydata)
View(trainingdata)
svm <- svm(group ~ pol_margin + col_degree + house_income, data=trainingdata, kernel = "linear", cost=10, scale=FALSE)
View(svm)
View(trainingdata)
svmpredict <- predict(svm, testydata)
svmtable <- table(pred=prediction, true=testydata[,1]))
svmtable <- table(pred=prediction, true=testydata[,1])
svmtable <- table(pred=svmpredict, true=testydata[,1])
svmtable
svmpredict
svmtable <- table(Prediction=svmpredict, True Party=testydata[,1])
svmtable
svmtable <- table("Prediction"=svmpredict, "True Party"=testydata[,1])
svmtable
predict2 <- predict(svm, trainingdata)
predict2
tab2 <- table(pred=predict2, true=trainingdata[,1])
tab2
svm <- svm(group ~ pol_margin + col_degree + house_income, data=trainingdata, kernel = "linear", scale=FALSE)
svmpredict <- predict(svm, testydata)
svmpredict
svmtable <- table("Prediction"=svmpredict, "True Party"=testydata[,1])
svmtable
svm <- svm(group ~ pol_margin + col_degree + house_income, data=trainingdata, kernel = "linear", c=50 scale=FALSE)
svmpredict <- predict(svm, testydata)
svmpredict
svmtable <- table("Prediction"=svmpredict, "True Party"=testydata[,1])
svmtable
svm <- svm(group ~ pol_margin + col_degree + house_income, data=trainingdata, kernel = "linear", cost=50, scale=FALSE)
svmpredict <- predict(svm, testydata)
svmpredict
svmtable <- table("Prediction"=svmpredict, "True Party"=testydata[,1])
svmtable
svm <- svm(group ~ pol_margin + col_degree + house_income, data=trainingdata, kernel = "linear", scale=FALSE)
svmpredict <- predict(svm, testydata)
svmpredict
svmtable <- table("Prediction"=svmpredict, "True Party"=testydata[,1])
svmtable
pol2 <- read.csv("/Users/aaroncoates/Downloads/pol_data.csv")
pol2 <- read.csv("/Users/aaroncoates/Downloads/pol_data.csv")
trainsize2 <- floor((2/3)*nrow(pol2))
set.seed(3)
trainpol2 <- sample(nrow(pol2), size = trainsize2, replace=FALSE)
trainingdata2 <- pol2[trainpol2, ]
testydata2 <- pol2[-trainpol2, ]
naive <- naiveBayes(group ~ pol_margin + col_degree + house_income, data=trainingdata2)
naivepred <- predict(naive, testydata2)
naivepred
naivetable <- table("Prediction"=naivepred, "True Party"=testydata2[,1])
naivetable
tunez <- tune(svm, group ~ pol_margin + col_degree + house_income, data=trainingdata, kernel = "linear",
ranges = list(cost = c(0.001, 0.01, 0.1, 1, 5, 10, 100)), scale=FALSE)
tunez <- tune(svm, group ~ pol_margin + col_degree + house_income, data=trainingdata, kernel = "linear",
ranges = list(cost = c(0.001, 0.01, 0.1, 1, 5, 10, 100)))
tunez <- tune(svm, group ~ pol_margin + col_degree + house_income, data=trainingdata, kernel = "linear",
ranges = list(cost = c(0.001, 0.01, 0.1, 1, 5, 10, 100)))
tune.out <- tune(svm, group ~ pol_margin + col_degree + house_income, data=trainingdata, kernel = "linear",
ranges = list(cost = c(0.001, 0.01, 0.1, 1, 5, 10, 100)))
tunez <- tune(svm, group ~ pol_margin + col_degree + house_income, data=trainingdata, kernel = "linear",
ranges = list(cost = c(0.001, 0.01, 0.1, 1, 5, 10, 100)))
svmlolz <- svm(group ~ pol_margin + col_degree + house_income, data=trainingdata, kernel = "linear", scale=FALSE)
tunez <- tune(svm, group ~ pol_margin + col_degree + house_income, data=trainingdata, kernel = "linear",
ranges = list(cost = c(0.001, 0.01, 0.1, 1, 5, 10, 100)))
svm <- svm(group ~ pol_margin + col_degree + house_income, data=trainingdata, kernel = "linear", scale=FALSE)
svmteehee <- svm(group ~ pol_margin + col_degree + house_income, data=trainingdata, kernel = "linear", scale=FALSE)
tunez <- tune(svm, group ~ pol_margin + col_degree + house_income, data=trainingdata, kernel = "linear",
ranges = list(cost = c(0.001, 0.01, 0.1, 1, 5, 10, 100)))
View(svm)
rm(svm)
svmteehee <- svm(group ~ pol_margin + col_degree + house_income, data=trainingdata, kernel = "linear", scale=FALSE)
tunez <- tune(svm, group ~ pol_margin + col_degree + house_income, data=trainingdata, kernel = "linear",
ranges = list(cost = c(0.001, 0.01, 0.1, 1, 5, 10, 100)))
summary(tunez)
swaggysvm <- tunez$best.model
summary(swaggysvm)
svmpredict <- predict(swaggysvm, testydata)
svmpredict <- predict(swaggysvm, testydata)
svmpredict
svmtable <- table("Prediction"=svmpredict, "True Party"=testydata[,1])
svmtable
naivetable
tunez <- tune(svm, group ~ pol_margin + col_degree + house_income, data=trainingdata, kernel = "linear",
ranges = list(cost = c(0.001, 0.01, 0.1, 1, 5, 10, 100)))
summary(tunez)
swaggysvm <- tunez$best.model
summary(swaggysvm)
svmpredict <- predict(swaggysvm, testydata)
svmpredict
svmtable <- table("Prediction"=svmpredict, "True Party"=testydata[,1])
svmtable
naive <- naiveBayes(group ~ pol_margin + col_degree + house_income, data=trainingdata)
naivepred <- predict(naive, testydata)
naivepred
naivetable <- table("Prediction"=naivepred, "True Party"=testydata[,1])
naivetable
setwd("~/Documents/GitHub/MMSS_311_2")
pol <- read.csv("/Users/aaroncoates/Downloads/pol_data.csv")
library(broom)
library(e1071)
library(caret)
pol$group <- as.factor(pol$group)
trainsize <- floor((2/3)*nrow(pol))
set.seed(2)
train_pol <- sample(nrow(pol), size = trainsize, replace=FALSE)
trainingdata <- pol[train_pol, ]
testydata <- pol[-train_pol, ]
tunez <- tune(svm, group ~ pol_margin + col_degree + house_income, data=trainingdata, kernel = "linear",
ranges = list(cost = c(0.001, 0.01, 0.1, 1, 5, 10, 100)))
swaggysvm <- tunez$best.model
summary(swaggysvm)
svmpredict <- predict(swaggysvm, testydata)
svmpredict
svmtable <- table("Prediction"=svmpredict, "True Party"=testydata[,1])
svmtable
naive <- naiveBayes(group ~ pol_margin + col_degree + house_income, data=trainingdata)
naivepred <- predict(naive, testydata)
naivepred
naivetable <- table("Prediction"=naivepred, "True Party"=testydata[,1])
naivetable
setwd("~/Documents/GitHub/MMSS_311_2")
pol <- read.csv("/Users/aaroncoates/Downloads/pol_data.csv")
library(broom)
library(e1071)
library(caret)
pol$group <- as.factor(pol$group)
trainsize <- floor((2/3)*nrow(pol))
set.seed(100)
train_pol <- sample(nrow(pol), size = trainsize, replace=FALSE)
trainingdata <- pol[train_pol, ]
testydata <- pol[-train_pol, ]
tunez <- tune(svm, group ~ pol_margin + col_degree + house_income, data=trainingdata, kernel = "linear",
ranges = list(cost = c(0.001, 0.01, 0.1, 1, 5, 10, 100)))
swaggysvm <- tunez$best.model
summary(swaggysvm)
svmpredict <- predict(swaggysvm, testydata)
svmpredict
svmtable <- table("Prediction"=svmpredict, "True Party"=testydata[,1])
svmtable
naive <- naiveBayes(group ~ pol_margin + col_degree + house_income, data=trainingdata)
naivepred <- predict(naive, testydata)
naivepred
naivetable <- table("Prediction"=naivepred, "True Party"=testydata[,1])
naivetable
```{r setup, include=FALSE}
(sum(with(sick, result.d==1 & predictionOLS>=.5)) +
sum(with(sick, result.d==0 & predictionOLS<=.5)))/1000
setwd("~/Documents/GitHub/MMSS_311_2")
sick <- read.csv("/Users/aaroncoates/Downloads/sick_data.csv")
library(dplyr)
library(ggplot2)
library(glmnet)
library(broom)
library(aod)
sick$result.d <- sapply(sick$result, function(x){
if(x == "Positive"){
1
} else {
0
}})
regOLS <- glm(result.d ~ temp + bp, data=sick) %>% broom::tidy()
regOLS
for (i in 1:1000) {sick$predictionOLS[i] <-
regOLS[1, 2] + regOLS[2, 2]*sick$temp[i] + regOLS[3,2]*sick$bp[i]}
(sum(with(sick, result.d==1 & predictionOLS>=.5)) +
sum(with(sick, result.d==0 & predictionOLS<=.5)))/1000
intOLS <- (regOLS[1, 2] -.5)/(-regOLS[3, 2])
slopeyOLS <- regOLS[2, 2]/(-regOLS[3,2])
intOLS <- (regOLS[1, 2] -.5)/(-regOLS[3, 2])
slopeyOLS <- regOLS[2, 2]/(-regOLS[3,2])
intOLS
slopeyOLS
plotOLS <- ggplot(data = sick, aes(x = temp, y = bp, col=result)) +
geom_point() + geom_abline(intercept = intOLS[1, 1],
slope = slopeyOLS[1, 1]) +
labs(title ="OLS", x = "Temperature", y = "Blood Pressure")
plotOLS
sick$result <- factor(sick$result)
logit <- glm(result ~ temp + bp, data = sick,
family = "binomial") %>% broom::tidy()
logit
for (i in 1:1000) {sick$predictionLOGIT[i] <-
logit[1, 2] + logit[2, 2]*sick$temp[i] + logit[3,2]*sick$bp[i]}
(sum(with(sick, result.d==1 & predictionLOGIT>=.5)) +
sum(with(sick, result.d==0 & predictionLOGIT<=.5))) / 1000
intLOG <- (logit[1, 2] -.5)/(-logit[3, 2])
slopeyLOG <- logit[2, 2]/(-logit[3,2])
intLOG
slopeyLOG
knitr::opts_chunk$set(echo = TRUE)
setwd("~/Documents/GitHub/MMSS_311_2")
wid <- read.csv("/Users/aaroncoates/Downloads/widget_data.csv")
library(dplyr)
library(ggplot2)
library(glmnet)
library(broom)
library(aod)
grid=10^seq(2,-2,length=100)
ridge <- glmnet(x = as.matrix(wid[, -1]), y = wid$y, alpha=0, lambda=grid)
ridge1 <- tidy(ridge)
ggplot(data=ridge1, aes(x=lambda, y=estimate, colour=term)) +
geom_line() + coord_cartesian(xlim = c(0,100), ylim = c(-.5, .5))
ggplot(data=ridge1, aes(x=log(lambda), y=estimate, colour=term)) +
geom_line() + coord_cartesian(xlim = c(0,100), ylim = c(-.5, .5)) +
labs(title ="Ridge Coefficients", x = "Lambda", y = "Coefficient Estimate")
ggplot(data=ridge1, aes(x=log(lambda), y=estimate, colour=term)) +
geom_line() + labs(title ="Ridge Coefficients",
x = "Lambda", y = "Coefficient Estimate")
ggplot(data=ridge1, aes(x=log(lambda), y=estimate, colour=term)) +
geom_line() + labs(title ="Ridge Coefficients",
x = "Lambda", y = "Coefficient Estimate") +
coord_cartesian(xlim = c(-5,5), ylim = c(-5, 5))
ggplot(data=ridge1, aes(x=log(lambda), y=estimate, colour=term)) +
geom_line() + labs(title ="Ridge Coefficients",
x = "Log(Lambda)", y = "Coefficient Estimate") +
coord_cartesian(xlim = c(-5,5), ylim = c(-5, 5))
ggplot(data=ridge1, aes(x=log(lambda), y=estimate, colour=term)) +
geom_line() + labs(title ="Ridge Coefficients",
x = "Log(Lambda)", y = "Coefficient Estimate") +
ggplot(data=ridge1, aes(x=log(lambda), y=estimate, colour=term)) +
geom_line() + labs(title ="Ridge Coefficients",
x = "Log(Lambda)", y = "Coefficient Estimate")
ggplot(data=ridge1, aes(x=log(lambda), y=estimate, colour=term)) +
geom_line() + labs(title ="Ridge Coefficients",
x = "Log(Lambda)", y = "Coefficient Estimate") +
coord_cartesian(xlim = c(-2,2), ylim = c(-5, 5))
ggplot(data=ridge1, aes(x=log(lambda), y=estimate, colour=term)) +
geom_line() + labs(title ="Ridge Coefficients",
x = "Log(Lambda)", y = "Coefficient Estimate") +
coord_cartesian(xlim = c(-2,2), ylim = c(-2.5, 2.5))
View(ridge1)
plot(ridge, label = TRUE)
ggplot(data=ridge1, aes(x=log(lambda), y=estimate, colour=term)) +
geom_line() + labs(title ="Ridge Coefficients",
x = "Log(Lambda)", y = "Coefficient Estimate") +
coord_cartesian(xlim = c(-2,2), ylim = c(-2.5, 2.5))
ggplot(data=ridge1, aes(x=log(lambda), y=estimate, colour=term)) +
geom_line() + labs(title ="Ridge Coefficients",
x = "Log(Lambda)", y = "Coefficient Estimate") +
coord_cartesian(xlim = c(-2,2), ylim = c(-2.5, 2.5))
View(ridge1)
ridge1 <- tidy(ridge)
ridge1$newlambda <- log(ridge1$lambda)
View(ridge1)
setwd("~/Documents/GitHub/MMSS_311_2")
wid <- read.csv("/Users/aaroncoates/Downloads/widget_data.csv")
library(dplyr)
library(ggplot2)
library(glmnet)
library(broom)
library(aod)
grid=10^seq(2,-2,length=100)
ridge <- glmnet(x = as.matrix(wid[, -1]), y = wid$y, alpha=0, lambda=grid)
ridge1 <- tidy(ridge)
ggplot(data=ridge1, aes(x=log10(lambda), y=estimate, colour=term)) +
geom_line() + labs(title ="Ridge Coefficients",
x = "Log(Lambda)", y = "Coefficient Estimate") +
coord_cartesian(xlim = c(-2,2), ylim = c(-2.5, 2.5))
ggplot(data=ridge1, aes(x=log10(lambda), y=estimate, colour=term)) +
geom_line() + labs(title ="Ridge Coefficients",
x = "Log(Lambda)", y = "Coefficient Estimate") +
coord_cartesian(xlim = c(-2,2), ylim = c(-1, 1))
crossval <- cv.glmnet(x = as.matrix(wid[, -1]), y = wid$y, alpha=0, lambda=grid)
plot(crossval)
crossval$lambda.min
coef(crossval, s = "lambda.min")
grid=10^seq(2,-2,length=100)
lasso <- glmnet(x = as.matrix(wid[, -1]), y = wid$y, alpha=1, lambda=grid)
plot(lasso, label = TRUE)
lasso1 <- tidy(lasso)
ggplot(data=lasso1, aes(x=lambda, y=estimate, colour=term)) +
geom_line() + coord_cartesian(xlim = c(0,2), ylim = c(-1, 1))
ggplot(data=lasso1, aes(x=lambda, y=estimate, colour=term)) +
geom_line() + coord_cartesian(xlim = c(0,2), ylim = c(-1, 1))
+ labs(title ="LASSO Coefficients", x = "Lambda", y = "Coefficient Estimate") +
ggplot(data=lasso1, aes(x=lambda, y=estimate, colour=term)) +
geom_line() + coord_cartesian(xlim = c(0,2), ylim = c(-1, 1))
+ labs(title ="LASSO Coefficients", x = "Lambda", y = "Coefficient Estimate")
ggplot(data=lasso1, aes(x=lambda, y=estimate, colour=term)) +
geom_line() + coord_cartesian(xlim = c(0,2), ylim = c(-1, 1)) +
labs(title ="LASSO Coefficients", x = "Lambda", y = "Coefficient Estimate")
ggplot(data=lasso1, aes(x=lambda, y=estimate, colour=term)) +
geom_line() + coord_cartesian(xlim = c(0,.5), ylim = c(-.5, .5)) +
labs(title ="LASSO Coefficients", x = "Lambda", y = "Coefficient Estimate")
crossvallasso <- cv.glmnet(x = as.matrix(wid[, -1]), y = wid$y, alpha=1, lambda=grid)
plot(crossvallasso)
crossvallasso$lambda.min
coef(crossvallasso, s = "lambda.min")
knitr::opts_chunk$set(echo = TRUE)
tunez <- tune(svm, group ~ pol_margin + col_degree + house_income, data=trainingdata, kernel = "linear",
ranges = list(cost = c(0.001, 0.01, 0.1, 1, 5, 10, 100)))
summary(tunez)
swaggysvm <- tunez$best.model
summary(swaggysvm)
svmpredict <- predict(swaggysvm, testydata)
svmtable <- table("Prediction"=svmpredict, "True Party"=testydata[,1])
svmtable
setwd("~/Documents/GitHub/MMSS_311_2")
pol <- read.csv("/Users/aaroncoates/Downloads/pol_data.csv")
library(broom)
library(e1071)
library(caret)
pol$group <- as.factor(pol$group)
trainsize <- floor((2/3)*nrow(pol))
set.seed(100)
train_pol <- sample(nrow(pol), size = trainsize, replace=FALSE)
trainingdata <- pol[train_pol, ]
testydata <- pol[-train_pol, ]
tunez <- tune(svm, group ~ pol_margin + col_degree + house_income, data=trainingdata, kernel = "linear",
ranges = list(cost = c(0.001, 0.01, 0.1, 1, 5, 10, 100)))
swaggysvm <- tunez$best.model
summary(swaggysvm)
svmpredict <- predict(swaggysvm, testydata)
svmtable <- table("Prediction"=svmpredict, "True Party"=testydata[,1])
svmtable
naive <- naiveBayes(group ~ pol_margin + col_degree + house_income, data=trainingdata)
summary(naive)
View(naive)
naive <- naiveBayes(group ~ pol_margin + col_degree + house_income, data=trainingdata)
naivepred <- predict(naive, testydata)
naivetable <- table("Prediction"=naivepred, "True Party"=testydata[,1])
naivetable
